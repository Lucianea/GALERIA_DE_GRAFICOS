[
["index.html", "Galeria de Gráficos Preface 0.1 Nossa proposta", " Galeria de Gráficos Steven Dutt-Ross &amp; Luciane Alcoforado Preface Aqui colocaremos um prefácio 0.1 Nossa proposta Neste livro apresentaremos diversos modelos de gráficos para visualização de dados. Utilizaremos banco de dados interno do R chamado mtcars para produzir a maioria dos gráficos. O leitor poderá adaptar os códigos para o seu próprio banco de dados com pequenos ajustes, produzindo gráficos de mesmo tipo. Para melhor aproveitamento do conteúdo exposto neste livro, o leitor deve ter alguma familiaridade com a linguagem R. Datauff Niterói Dataunirio Rio de Janeiro "],
["Pizza.html", "Cap 1 Gráfico de Pizza 1.1 Pizza 3D 1.2 Pizza no ggplot2 1.3 Modificação da pizza no ggplot2 1.4 Alternativas ao Gráfico de Pizza 1.5 Gráfico de Doughnut 1.6 Nightingale Rose Chart 1.7 Gráficos do tipo ventilador “Fanplot”. 1.8 Gráficos do tipo Visualização em círculo “Circle Visualisation”.", " Cap 1 Gráfico de Pizza Definição: O gráfico de pizza (de setores) é um diagrama circular onde os valores de cada categoria representada são proporcionais às frequências (fatia da pizza). Para que serve: O gráfico de pizza é uma maneira de resumir a informação de uma variável qualitativa/categórica. Serve para comparar quantidades em cada categoria. Uma variável é chamada qualitativa, também conhecida como categórica, se seus valores pertencem a uma coleção de classes não superpostas. Exemplos comuns incluem notas de letra de estudante (A, B, C, D ou F), classificação de algo (Baixo, médio ou alto), Sexo (Feminino ou Masculino). Os tutoriais desta seção são baseados em um banco de dados interno do R chamado mtcars. Consiste em uma coleção de informações sobre 32 carros. data(mtcars) mtcars &lt;- within(mtcars, { am &lt;- factor(am, labels=c(&#39;Automático&#39;,&#39;Manual&#39;)) }) mtcars &lt;- within(mtcars, { vs &lt;- factor(vs, labels=c(&#39;Não&#39;,&#39;Sim&#39;)) }) par(bg=&quot;#fdf6e3&quot;) par(mfrow=c(1,2),bg=&quot;#F2F2F2&quot;) contagem = table(mtcars$am) nomes = levels(mtcars$am) porcent = round(contagem/sum(contagem)*100,2) rotulo=paste(nomes,&quot; (&quot;,porcent,&quot;%&quot;,&quot;)&quot;,sep=&quot;&quot;) pie(table(mtcars$am),labels=rotulo, main=&quot;Tipo de marcha&quot;, col=c(&quot;red&quot;,&quot;blue&quot;), cex.label=0.5) contagem2 = table(mtcars$vs) nomes2 = levels(mtcars$vs) porcent2 = round(contagem2/sum(contagem2)*100,2) rotulo2=paste(nomes2,&quot; (&quot;,porcent2,&quot;%&quot;,&quot;)&quot;,sep=&quot;&quot;) pie(table(mtcars$vs),labels=rotulo2, main=&quot;Tipo&quot;, col=c(&quot;#003154&quot;,&quot;#dd4a37&quot;)) 1.1 Pizza 3D library(RColorBrewer) par(bg=&quot;#F2F2F2&quot;) #display.brewer.all() COR&lt;-brewer.pal(4,&quot;Dark2&quot;) #COR library(plotrix) pieval&lt;-c(0.1,0.15,0.25,0.5) pielabels&lt;- c(&quot;A gente odeia\\n Pizza&quot;,&quot;Fazemos oposição\\n às Pizzas&quot;,&quot;Não me importo\\n com Pizza&quot;,&quot;Eu AMO pizza&quot;) pielabels2=paste(pielabels,&quot;\\n&quot;,pieval,sep=&quot;&quot;) pie3D(pieval,radius=0.95,labels=pielabels2,explode=0.1,main=&quot;Opinião sobre a Pizza em 3D&quot;, col=COR, labelcex=0.8) par(mfrow=c(1,2),bg=&quot;#fdf6e3&quot;) pie3D(table(mtcars$am),labels=rotulo,radius=0.9,explode=0.2, main=&quot;Pizza 3D do Tipo de marcha&quot;, col=c(&quot;red&quot;,&quot;blue&quot;)) pie3D(table(mtcars$vs),labels=rotulo2, main=&quot;Pizza 3D do Tipo&quot;, col=c(&quot;#003154&quot;,&quot;#dd4a37&quot;)) 1.2 Pizza no ggplot2 library(ggplot2) pizza&lt;-ggplot(mtcars, aes(x=factor(1), fill=am))+ geom_bar(width = 1)+ coord_polar(&quot;y&quot;) pizza+ theme(plot.background = element_rect(fill = &quot;#e2ded3&quot;, colour = &quot;#e2ded3&quot;)) 1.3 Modificação da pizza no ggplot2 dados = data.frame(round(contagem/sum(contagem)*100,2)) dados &lt;- within(dados, { Var1 &lt;- factor(Var1, labels=c(&#39;Automático&#39;,&#39;Manual&#39;)) }) attach(dados) dados &lt;- dados[order(Freq),] detach(dados) blank_theme &lt;- theme_minimal()+ theme( axis.title.x = element_blank(), axis.title.y = element_blank(), panel.border = element_blank(), panel.grid=element_blank(), axis.ticks = element_blank(), plot.title=element_text(size=14, face=&quot;bold&quot;) ) library(scales) pizza&lt;-ggplot(dados, aes(x=&quot;&quot;, y=Freq, fill=Var1))+ geom_bar(width = 1, stat = &quot;identity&quot;)+ coord_polar(&quot;y&quot;) pizza + scale_fill_brewer(palette=&quot;Dark2&quot;) + blank_theme + theme(axis.text.x=element_blank()) + geom_text(aes(y = Freq/2 + c(0, cumsum(Freq)[-length(Freq)]), label = percent(Freq/100)), data = dados, size=5) library(&quot;ggthemes&quot;) pizza+ scale_fill_brewer(palette=&quot;Dark2&quot;) + theme_economist() + geom_text(aes(y = Freq/2 + c(0, cumsum(Freq)[-length(Freq)]), label = percent(Freq/100)), size=5) 1.4 Alternativas ao Gráfico de Pizza 1.5 Gráfico de Doughnut 1.5.0.1 (Doughnutplot, Ring plot, Donut plot.) library(broom) library(tidyverse) dat = data.frame(count=c(10,60,20,50), ring=c(&quot;A&quot;, &quot;A&quot;,&quot;B&quot;,&quot;B&quot;), category=c(&quot;C&quot;,&quot;D&quot;,&quot;C&quot;,&quot;D&quot;)) # registro do p-valor cs.pvalue &lt;- dat %&gt;% spread(value = count,key=category) %&gt;% ungroup() %&gt;% select(-ring) %&gt;% chisq.test() %&gt;% tidy() cs.pvalue &lt;- dat %&gt;% spread(value = count,key=category) %&gt;% select(-ring) %&gt;% fisher.test() %&gt;% tidy() %&gt;% full_join(cs.pvalue) # registro das frações #dat = dat[order(dat$count), ] dat %&lt;&gt;% group_by(ring) %&gt;% mutate(fraction = count / sum(count), ymax = cumsum(fraction), ymin = c(0,ymax[1:length(ymax)-1])) # Limite de X baseNum &lt;- 4 #numCat &lt;- length(unique(dat$ring)) dat$xmax &lt;- as.numeric(dat$ring) + baseNum dat$xmin = dat$xmax -1 # Gráfico Doughnut p2 = ggplot(dat, aes(fill=category, alpha = ring, ymax=ymax,ymin=ymin,xmax=xmax,xmin=xmin)) + geom_rect(colour=&quot;grey30&quot;) + coord_polar(theta=&quot;y&quot;) + geom_text(inherit.aes = F, x=c(-1,1),y=0, data = cs.pvalue,aes(label = paste(method, &quot;\\n&quot;, format(p.value,scientific = T,digits = 2))))+ xlim(c(0, 6)) + theme_bw() + theme(panel.grid=element_blank()) + theme(axis.text=element_blank()) + theme(axis.ticks=element_blank(), panel.border = element_blank()) + labs(title=&quot;Gráfico Doughnut&quot;) + scale_fill_brewer(palette = &quot;Set1&quot;) + scale_alpha_discrete(range = c(0.5,0.9)) p2 1.6 Nightingale Rose Chart pie1&lt;-c(3,6,5,4,7,8,9,1,4) pie2&lt;-list(0:3,1:6,2:5,1:4,0:7,4:8,2:9,0:1,0:4) pie3&lt;-sample(10:60,36) pie4&lt;-list(sort(sample(1:60,8))) for(sector in 2:36) pie4[[sector]]&lt;-sort(sample(1:60,8)) par(radial.pie(pie1,labels=LETTERS[1:9])) 1.7 Gráficos do tipo ventilador “Fanplot”. library(plotrix) iucn.df&lt;-data.frame(area=c(&quot;África&quot;,&quot;Ásia&quot;,&quot;Europa&quot;,&quot;América do Norte&quot;, &quot;América do Sul&quot;,&quot;Oceania&quot;),threatened=c(5994,7737,1987,4716,5097,2093)) fan.plot(iucn.df$threatened,max.span=pi, labels=paste(iucn.df$area,iucn.df$threatened,sep=&quot;-&quot;), main=&quot;Espécies ameaçadas por continente (fan.plot)&quot;,ticks=276) 1.8 Gráficos do tipo Visualização em círculo “Circle Visualisation”. library(packcircles) library(ggplot2) continente &lt;- circleProgressiveLayout(iucn.df) dat1 &lt;- circleLayoutVertices(continente) ggplot(data = dat1) + geom_polygon(aes(x, y, group = id, fill = factor(id)), colour = &quot;black&quot;, show.legend = FALSE) + scale_fill_manual(values = iucn.df$area) + scale_y_reverse() + coord_equal() ######################################################################################### library(RColorBrewer) #display.brewer.all() COR6&lt;-brewer.pal(6,&quot;YlGnBu&quot;) #devtools::install_github(&quot;jcheng5/bubbles&quot;) library(bubbles) bubbles(value = iucn.df$threatened, color = COR6, label = iucn.df$area, width=800, height=800) ######################################################################################### t &lt;- theme_bw() + theme(panel.grid = element_blank(), axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank()) theme_set(t) # circle areas areas &lt;- 1:1000 # arrange circles from small to large packing1 &lt;- circleProgressiveLayout(areas) dat1 &lt;- circleLayoutVertices(packing1) # arrange same circles from large to small packing2 &lt;- circleProgressiveLayout( rev(areas) ) dat2 &lt;- circleLayoutVertices(packing2) dat &lt;- rbind( cbind(dat1, set = 1), cbind(dat2, set = 2) ) ggplot(data = dat, aes(x, y)) + geom_polygon(aes(group = id, fill = -id), colour = &quot;black&quot;, show.legend = FALSE) + scale_fill_distiller(palette = &quot;RdGy&quot;) + coord_equal() + facet_wrap(~set, labeller = as_labeller( c(&#39;1&#39; = &quot;small circles first&quot;, &#39;2&#39; = &quot;big circles first&quot;)) ) "],
["Barras.html", "Cap 2 Gráfico de Barras 2.1 Gráficos de Barras “GAP” 2.2 Barras no ggplot2 2.3 Rótulos das Barras no ggplot2 2.4 Alternativas ao Gráfico de Barras 2.5 Gráficos de pontos “Dotplot” para variáveis discretas. 2.6 Gráfico com Barras preenchidas com símbolos 2.7 Gráfico de Barras Circular", " Cap 2 Gráfico de Barras Para que serve: O gráfico de barras é uma maneira de resumir a informação de uma variável qualitativa/categórica. Uma variável é chamada qualitativa, também conhecida como categórica, se seus valores pertencem a uma coleção de classes não superpostas. Exemplos comuns incluem notas de letra de estudante (A, B, C, D ou F), classificação de algo (Baixo, médio ou alto), Sexo (Feminino ou Masculino). Há vantagem do uso do gráfico de barras sobre o gráfico de pizza quando temos variáveis ordinais ou quando há muitas categorias de análise. data(mtcars) mtcars &lt;- within(mtcars, { am &lt;- factor(am, labels=c(&#39;Automático&#39;,&#39;Manual&#39;)) }) mtcars &lt;- within(mtcars, { vs &lt;- factor(vs, labels=c(&#39;Não&#39;,&#39;Sim&#39;)) }) par(bg=&quot;#fdf6e3&quot;) contagem = table(mtcars$am) nomes = levels(mtcars$am) porcent = round(prop.table(contagem)*100,2) rotulo=paste(nomes,&quot; (&quot;,porcent,&quot;%&quot;,&quot;)&quot;,sep=&quot;&quot;) barras&lt;-barplot(table(mtcars$am), ylab=&quot;Frequência&quot;, main=&quot;Tipo de marcha&quot;, col=c(&quot;red&quot;,&quot;blue&quot;)) text(barras, 0, rotulo,cex=1,pos=3,col =&quot;#ffffff&quot;) contagem2 = table(mtcars$vs) nomes2 = levels(mtcars$vs) porcent2 = round(prop.table(contagem2)*100,2) rotulo2=paste(nomes2,&quot; (&quot;,porcent2,&quot;%&quot;,&quot;)&quot;,sep=&quot;&quot;) barras2&lt;-barplot(table(mtcars$vs), ylab=&quot;Frequência&quot;, main=&quot;Tipo&quot;, col=c(&quot;#003154&quot;,&quot;#dd4a37&quot;)) text(barras2, 0, rotulo,cex=1,pos=3,col =&quot;#ffffff&quot;) par(bg=&quot;#fdf6e3&quot;) library(plotrix) barpos&lt;-barplot(contagem,main=&quot;Gráfico de Barras&quot;,col=c(&quot;red&quot;,&quot;blue&quot;)) barlabels(barpos,contagem,col=c(&quot;red&quot;,&quot;blue&quot;)) barpos2&lt;-barplot(contagem2,main=&quot;Gráfico de Barras&quot;, col=c(&quot;#003154&quot;,&quot;#dd4a37&quot;)) barlabels(barpos2,contagem2,cex=1.3,prop=0.1, col=c(&quot;#003154&quot;,&quot;#dd4a37&quot;)) 2.1 Gráficos de Barras “GAP” library(RColorBrewer) par(bg=&quot;#fdf6e3&quot;) #display.brewer.all() COR&lt;-brewer.pal(4,&quot;Dark2&quot;) #COR library(plotrix) twogrp&lt;-c(rnorm(10)+4,rnorm(10)+20) gap.barplot(twogrp,gap=c(8,16),xlab=&quot;Index&quot;,ytics=c(3,6,17,20), ylab=&quot;Group values&quot;,main=&quot;Gráfico de Barras com um&#39;GAP&#39;&quot;) gap.barplot(twogrp,gap=c(8,16),xlab=&quot;Index&quot;,ytics=c(3,6,17,20), ylab=&quot;Valores&quot;,horiz=TRUE,main=&quot;Gráfico de Barras com um&#39;GAP&#39;&quot;) 2.2 Barras no ggplot2 library(ggplot2) ggplot(data=mtcars, aes(x=am)) + geom_bar(stat=&quot;count&quot;, fill=&quot;steelblue&quot;)+ theme_minimal() #install.packages(&#39;RCurl&#39;) library(RCurl) ## Carregando pacotes exigidos: bitops #X &lt;- read.csv(url(&quot;http://some.where.net/data/foo.csv&quot;)) x &lt;- getURL(&quot;https://raw.githubusercontent.com/DATAUNIRIO/Base_de_dados/master/Estados.csv&quot;) BaseUF &lt;- read.csv(text=x, header=T, quote=&quot;&quot;, sep=&quot;;&quot;,dec = &quot;,&quot;) ggplot(data=BaseUF, aes(x=Regiao_Geografica)) + geom_bar(stat=&quot;count&quot;, fill=c(&quot;#10c6d3&quot;,&quot;#0ea5af&quot;,&quot;#0b8b93&quot;,&quot;#096c72&quot;,&quot;#064144&quot;))+ theme_minimal() 2.3 Rótulos das Barras no ggplot2 dados = data.frame(round(prop.table(contagem)*100,2)) dados &lt;- within(dados, { Var1 &lt;- factor(Var1, labels=c(&#39;Automático&#39;,&#39;Manual&#39;)) }) attach(dados) dados &lt;- dados[order(Freq),] detach(dados) # Fora das Barras ggplot(data=dados, aes(x=Var1, y=Freq)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;steelblue&quot;)+ geom_text(aes(label=Freq), vjust=-0.3, size=3.5)+ ylab(&quot;Frequência&quot;) + xlab(&quot;Tipo&quot;) + theme_minimal() # Dentro das Barras ggplot(data=dados, aes(x=Var1, y=Freq)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;#275b70&quot;)+ geom_text(aes(label=Freq), vjust=1.6, color=&quot;white&quot;,size=3.5)+ ylab(&quot;Frequência&quot;) + xlab(&quot;Tipo&quot;) + theme_minimal() ggplot(data=BaseUF, aes(x=Regiao_Geografica)) + geom_bar(stat=&quot;count&quot;, fill=c(&quot;#10c6d3&quot;,&quot;#0ea5af&quot;,&quot;#0b8b93&quot;,&quot;#096c72&quot;,&quot;#064144&quot;))+ geom_text(stat=&#39;count&#39;,aes(label=..count..),vjust=1.6, color=&quot;white&quot;,size=3.5)+ ylab(&quot;Frequência&quot;) + xlab(&quot;Região Geográfica&quot;) + theme_minimal() ggplot(data=BaseUF, aes(x=Regiao_Geografica)) + geom_bar(stat=&quot;count&quot;, fill=c(&quot;#10c6d3&quot;,&quot;#0ea5af&quot;,&quot;#0b8b93&quot;,&quot;#096c72&quot;,&quot;#064144&quot;))+ geom_text(stat=&quot;count&quot;,aes(label=..count..),vjust=1.6, color=&quot;white&quot;,size=3.5)+ ylab(&quot;Frequência&quot;) + xlab(&quot;Região Geográfica&quot;) + theme_minimal() ggplot(data=BaseUF, aes(x=Regiao_Geografica)) + geom_bar(stat=&quot;count&quot;, fill=c(&quot;#10c6d3&quot;,&quot;#0ea5af&quot;,&quot;#0b8b93&quot;,&quot;#096c72&quot;,&quot;#064144&quot;))+ geom_text(aes(label = round(prop.table(..count..)*100,2), y= ..count.. ), stat= &quot;count&quot;, vjust=1.6, color=&quot;white&quot;,size=5.5) + labs(y = &quot;Percentual&quot;, fill=&quot;Regiao_Geografica&quot;) error &lt;- c(9, 6) # adding error bars plt&lt;-ggplot(data=dados, aes(x=Var1, y=Freq)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;#275b70&quot;)+ geom_text(aes(label=Freq), vjust=1.6, color=&quot;white&quot;,size=3.5)+ ylab(&quot;Frequência&quot;) + xlab(&quot;Tipo&quot;) + theme_minimal() plt + geom_errorbar(aes(ymin=Freq-error, ymax=Freq+error), width=.1, position=position_dodge(.1)) 2.4 Alternativas ao Gráfico de Barras 2.5 Gráficos de pontos “Dotplot” para variáveis discretas. Descrição. Um gráfico de pontos consiste em pontos de dados plotados em uma escala bastante simples, geralmente usando círculos preenchidos. É um tipo de gráfico utilizado na estatística para conjuntos de dados relativamente pequenos onde os valores se enquadram em uma série de barras discretas (categorias). Um gráfico de pontos é semelhante a um gráfico de barras porque a altura de cada “barra” de pontos é igual ao número de itens em uma categoria específica. library(plotrix) x &lt;- rpois(100,10) dotplot.mtb(x,yaxis=TRUE,main=&quot;Dotplot&quot;) 2.6 Gráfico com Barras preenchidas com símbolos Descrição. Produz um gráfico de barras onde cada unidade de ‘barra’ é preenchida com o número de símbolos igual ao tamanho da barra. set.seed(1001) bvals &lt;- matrix(rpois(12,20),nrow=3) b &lt;- symbolbarplot(bvals) require(ggplot2) # function ruler.bar.plot &lt;-function(gg, nn, mjtick =1, mntick = 0.2, mjtickcol = &quot;black&quot;, mntickcol = &quot;white&quot;){ seq.list&lt;-list() for(i in 1:length(gg)){ ystart&lt;-seq(mntick ,gg[i],mntick ) yend&lt;-ystart xstart&lt;-rep(i-0.45,length(ystart)) xend&lt;-xstart+0.1 nam.val&lt;-c(nn[i],rep(NA,length(ystart)-1)) numb.val&lt;-c(gg[i],rep(NA,length(ystart)-1)) seq.list[[i]]&lt;-data.frame(nam.val,numb.val,xstart,xend,ystart,yend) } df&lt;-as.data.frame(do.call(rbind, seq.list)) p &lt;- ggplot(df, aes(nam.val)) p + geom_bar(aes(y=numb.val,fill=nam.val),stat=&quot;identity&quot;,width=0.5,color=mjtickcol,lwd=1.1) + geom_segment(aes(x=xstart,y=ystart,xend=xend,yend=yend), color=mjtickcol) + ylim(c(0,max(gg)+0.5)) + scale_x_discrete(limits= nn) + geom_hline(yintercept=seq(mjtick,max(gg),mjtick),color=mntickcol,lwd=1.1)+ geom_text(aes (y = numb.val, label = numb.val), vjust= - 1 ) + guides(fill=FALSE) + theme_bw()+ theme(axis.title=element_blank(), axis.text.y=element_blank(), axis.text.x=element_text(angle=90,face=&quot;bold&quot;,size=rel(1.5)), axis.ticks=element_blank(), panel.background = element_rect(fill = mntickcol), panel.border=element_blank(), panel.grid=element_blank(), legend.position = &quot;none&quot;) } # human height in inches, ticking done at each 12 htinch &lt;- c(66, 72, 88, 54) id &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;) ruler.bar.plot(htinch, id, mjtick =12, mntick = 1, mjtickcol = &quot;black&quot;, mntickcol = &quot;white&quot;) VV = c(0.13, 0.33, 0.82, 0.46) LV = c(&quot;A&quot;, &quot;C&quot;, &quot;L&quot;, &quot;N&quot;) ruler.bar.plot(VV, LV, mjtick =0.1, mntick = 0.02, mjtickcol = &quot;black&quot;, mntickcol = &quot;white&quot;) 2.7 Gráfico de Barras Circular #circular bar plot library(ggplot2) #DATA catg &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;) percent &lt;- c(88, 76, 72, 69, 59, 48) category &lt;- paste (catg, &quot;-&quot;, percent, &quot;%&quot;, sep = &quot;&quot;) myd &lt;-data.frame(category,percent) # converting to factor and applying to #levels to set proper order of bars myd$category &lt;-factor(myd$category,levels=rev(myd$category)) # plot plt &lt;- ggplot(myd, aes(x = category, y = percent,fill = category)) + geom_bar(width = 0.85, stat=&quot;identity&quot;) + coord_polar(theta = &quot;y&quot;) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + ylim(c(0,100)) + ggtitle(&quot;Gráfico circular&quot;) + geom_text(data = myd, hjust = 1, size = 3, aes(x = category, y = 0, label = category)) plt + scale_fill_manual(values = c(&quot;red1&quot;,&quot;red4&quot;, &quot;green1&quot;, &quot;green4&quot;, &quot;blue1&quot;, &quot;blue4&quot;))+ theme_minimal()+ theme(legend.position = &quot;none&quot;, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_blank(), axis.text.y = element_blank(), axis.text.x = element_blank(), axis.ticks = element_blank()) "],
["Barras2VAR.html", "Cap 3 Barras com duas variáveis 3.1 Barras no ggplot2 3.2 Barras “lado a lado” no ggplot2 3.3 create label location for each proportional bar 3.4 MOSAICO 3.5 Balloon plot", " Cap 3 Barras com duas variáveis Para que serve: O gráfico de barras é uma maneira de resumir a informação de duas ou mais variáveis qualitativas. par(bg=&quot;#fdf6e3&quot;) load(url(&quot;https://raw.githubusercontent.com/DATAUNIRIO/Base_de_dados/master/Titanic.RData&quot;)) #legenda nomes = levels(Titanic$Classe) nomes ## [1] &quot;Tripulação&quot; &quot;Primeira&quot; &quot;Segunda&quot; &quot;Terceira&quot; # percentual da linha ou da coluna #porcent = prop.table(bartable)*100 # percentual do total #porcentlinha = prop.table(bartable,1)*100 # percentual da linha #porcentcoluna = prop.table(bartable,1)*100 # percentual da coluna bartable = table(Titanic$Classe, Titanic$Sobreviveu) ## get the cross tab porcentlinha = round(prop.table(bartable,1)*100,1) # percentual da linha arrendondada para uma casa decimal # Método simples rotulo=paste(porcentlinha) barras&lt;-barplot(bartable, beside = TRUE, legend = levels(unique(Titanic$Classe)),col=c(&quot;black&quot;,&quot;skyblue&quot;,&quot;royalblue&quot;,&quot;darkblue&quot;)) ## plot text(barras, 0, rotulo,cex=1,pos=3, col =&quot;#ffffff&quot;) par(bg=&quot;#fdf6e3&quot;) # Customização rotulo2=paste(nomes,&quot;\\n (&quot;,porcentlinha,&quot;%&quot;,&quot;)&quot;,sep=&quot;&quot;) barras2&lt;-barplot(bartable, beside = TRUE, legend = levels(unique(Titanic$Classe)),col=c(&quot;black&quot;,&quot;skyblue&quot;,&quot;royalblue&quot;,&quot;darkblue&quot;)) ## plot text(barras2, 2, rotulo2,cex=0.8,pos=4, srt=90,col =&quot;#ffffff&quot;) barras3&lt;-barplot(bartable, legend = levels(unique(Titanic$Classe)),col=c(&quot;black&quot;,&quot;skyblue&quot;,&quot;royalblue&quot;,&quot;darkblue&quot;)) 3.1 Barras no ggplot2 library(ggplot2) library(reshape2) x &lt;- c(5,17,31,9,17,10,30,28,16,29,14,34) y &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12) day &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12) df1 &lt;- data.frame(x, y, day) df2 &lt;- melt(df1, id.vars=&#39;day&#39;) ggplot(df2, aes(x=day, y=value, fill=variable)) + geom_bar(stat=&#39;identity&#39;, position=&#39;dodge&#39;) 3.2 Barras “lado a lado” no ggplot2 library(&quot;ggplot2&quot;) library(&quot;reshape&quot;) x &lt;- c(5,17,31,9,17,10,30,28,16,29,14,34) y &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12) day &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12) df1 &lt;- data.frame(x,y,day) df2 &lt;- reshape::melt(df1, id = c(&quot;day&quot;)) ggplot(data = df2, aes(x = day, y = value, fill = variable)) + geom_bar(stat = &quot;identity&quot;)+ facet_wrap(~ variable) + scale_x_continuous(breaks=seq(1,12,2)) library(&quot;ggplot2&quot;) library(&quot;reshape&quot;) x &lt;- c(5,17,31,9,17,10,30,28,16,29,14,34) y &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12) day &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12) df1 &lt;- data.frame(x,y,day) df2 &lt;- reshape::melt(df1, id = c(&quot;day&quot;)) ggplot(data = df2, aes(x = day, y = value, fill = day)) + geom_bar(stat = &quot;identity&quot;) + facet_wrap(~ variable) + scale_x_continuous(breaks=seq(1,12,2)) library(dplyr) avg_mpg &lt;- mtcars %&gt;% group_by(cyl, am) %&gt;% summarise(mpg = mean(mpg, na.rm = TRUE)) p1 &lt;- ggplot(avg_mpg, aes(factor(cyl), mpg, fill = factor(am))) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + ggtitle(&quot;Default color comparison&quot;) library(dplyr) avg_mpg &lt;- mtcars %&gt;% group_by(cyl, am) %&gt;% summarise(mpg = mean(mpg, na.rm = TRUE)) # more pleasing colors p2 &lt;- ggplot(avg_mpg, aes(factor(cyl), mpg, fill = factor(am))) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;, color = &quot;grey40&quot;) + scale_fill_brewer(palette = &quot;Pastel1&quot;) + ggtitle(&quot;Adjusted color comparison&quot;) grid.arrange(p1, p2, ncol = 2) library(dplyr) avg_mpg &lt;- mtcars %&gt;% group_by(cyl, am) %&gt;% summarise(mpg = mean(mpg, na.rm = TRUE)) p3 &lt;- ggplot(avg_mpg, aes(factor(cyl), mpg, fill = factor(am))) + geom_bar(stat = &quot;identity&quot;) p3 p1 &lt;- ggplot(mtcars, aes(reorder(row.names(mtcars), mpg), mpg)) + geom_bar(stat = &quot;identity&quot;) + coord_flip() + geom_text(aes(label = mpg), nudge_y = 2) p2 &lt;- ggplot(mtcars, aes(reorder(row.names(mtcars), mpg), mpg)) + geom_bar(stat = &quot;identity&quot;) + coord_flip() + geom_text(aes(label = mpg), nudge_y = -2, color = &quot;white&quot;) grid.arrange(p1, p2, ncol = 2) p1 &lt;- ggplot(avg_mpg, aes(factor(cyl), mpg, fill = factor(am))) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + geom_text(aes(label = round(mpg, 1)), position = position_dodge(0.9)) + ggtitle(&quot;Fig A: Default text alignment&quot;) p2 &lt;- ggplot(avg_mpg, aes(factor(cyl), mpg, fill = factor(am))) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + geom_text(aes(label = round(mpg, 1)), position = position_dodge(0.9), vjust = 1.5, color = &quot;white&quot;) + ggtitle(&quot;Fig B: Adjusted text alignment&quot;) grid.arrange(p1, p2, ncol = 2) # compare mpg across all cars and color based on cyl p1 &lt;- ggplot(mtcars, aes(x = reorder(row.names(mtcars), mpg), y = mpg, fill = factor(cyl))) + geom_bar(stat = &quot;identity&quot;) + coord_flip() + theme_minimal() + ggtitle(&quot;Fig. A: Default fill colors&quot;) p1 p2 &lt;- ggplot(mtcars, aes(x = reorder(row.names(mtcars), mpg), y = mpg, fill = factor(cyl))) + scale_fill_manual(values = c(&quot;#e5f5e0&quot;, &quot;#a1d99b&quot;, &quot;#31a354&quot;)) + geom_bar(stat = &quot;identity&quot;) + coord_flip() + theme_minimal() + ggtitle(&quot;Fig. B: Manually set fill colors&quot;) p2 3.3 create label location for each proportional bar # create label location for each proportional bar proportion &lt;- mtcars %&gt;% group_by(cyl, am) %&gt;% tally() %&gt;% group_by(cyl) %&gt;% mutate(pct = n / sum(n)) proportion &lt;- proportion %&gt;% group_by(cyl) %&gt;% mutate(label_y = cumsum(pct)) p1 &lt;- ggplot(proportion, aes(factor(cyl), pct, fill = factor(am, levels = c(1, 0)))) + geom_bar(stat = &quot;identity&quot;, color = &quot;grey40&quot;) + geom_text(aes(label = round(pct, 2), y = label_y), vjust = 1.5, color = &quot;white&quot;) + scale_fill_manual(values = c(&quot;#a1d99b&quot;, &quot;#31a354&quot;)) + labs(fill = &quot;AM&quot;) p1 p2 &lt;- ggplot(proportion, aes(factor(cyl), pct, fill = factor(am, levels = c(1, 0)))) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;, color = &quot;grey40&quot;) + scale_fill_manual(values = c(&quot;#a1d99b&quot;, &quot;#31a354&quot;)) + geom_text(aes(label = round(pct, 2), y = label_y), position = position_dodge(0.9), vjust = 1.5, color = &quot;white&quot;, family = &quot;Georgia&quot;) p2 p1+ labs(title = &quot;Distribution of Adults by Income in Dayton, OH&quot;, subtitle = &quot;The percentage of adults in the middle class eroded by 5.3% from 2000 to 2014. Although a small \\nfraction of these individuals moved into the upper class (+0.5%), the majority of these middle class \\nindividuals moved into the lower income class (+4.8%).&quot;, caption = &quot;Source: Pew Research Center analysis of the \\n2000 decennial census and 2014 American \\nCommunity Survey (IPUMS)&quot;) ## Alternativas ao Gráfico de Barras 3.4 MOSAICO Descrição. Conjunto de retângulo, cada um representa o cruzamento de dois níveis de duas variáveis e o tamanho de cada retângulo é proporcional ao percentual de observações dessa combinação de níveis de variáveis. # Gráfico de Mosaico ou Mosaicplot library(RColorBrewer) par(bg=&quot;#fdf6e3&quot;) #display.brewer.all() COR&lt;-brewer.pal(4,&quot;Dark2&quot;) #COR # Gráfico de Mosaico ou Mosaicplot mosaico&lt;-mosaicplot(bartable,col=COR) 3.5 Balloon plot Balloon plot is an alternative to bar plot for visualizing a large categorical data. We’ll use the function ggballoonplot() [in ggpubr], which draws a graphical matrix of a contingency table, where each cell contains a dot whose size reflects the relative magnitude of the corresponding component. par(bg=&quot;#fdf6e3&quot;) library(ggplot2) library(ggpubr) theme_set(theme_pubr()) data(&quot;mtcars&quot;) ggballoonplot(mtcars, fill = &quot;value&quot;) COR &lt;- c(&quot;#0D0887FF&quot;, &quot;#6A00A8FF&quot;, &quot;#B12A90FF&quot;,&quot;#E16462FF&quot;, &quot;#FCA636FF&quot;, &quot;#F0F921FF&quot;) ggballoonplot(mtcars, fill = &quot;value&quot;)+ scale_fill_gradientn(colors = COR) library(RCurl) x &lt;- getURL(&quot;https://raw.githubusercontent.com/DATAUNIRIO/Base_de_dados/master/Estados.csv&quot;) BaseUF &lt;- read.csv(text=x, header=T, quote=&quot;&quot;, sep=&quot;;&quot;,dec = &quot;,&quot;) row.names(BaseUF)&lt;-BaseUF$Estado BaseUF&lt;-BaseUF[,c(7:15)] ggballoonplot(BaseUF, fill = &quot;value&quot;) Correspondence analysis Correspondence analysis can be used to summarize and visualize the information contained in a large contingency table formed by two categorical variables. Required package: FactoMineR for the analysis and factoextra for the visualization library(FactoMineR) library(factoextra) dt=mtcars[,c(1:7,10)] res.ca &lt;- CA(dt, graph = FALSE) fviz_ca_biplot(res.ca, repel = TRUE) "],
["Boxplot.html", "Cap 4 Boxplot 4.1 Boxplot no ggplot2 4.2 Alternativas ao Boxplot 4.3 Trellis plot in Box-Percentile Panel Decile plot 4.4 Decile plot 4.5 Back 4.6 Notched boxplot", " Cap 4 Boxplot Definição: uma uma representação gráfica em formato de retângulos cuja área é proporcional à frequência de uma variável quantitativa e cuja largura é igual ao intervalo de classe. Para que serve: Um histograma é uma representação gráfica da distribuição de uma variável quantitativa contínua. Com o histograma pode-se visualizar a dispersão/concentração dos dados, bem como a assimetria/simetria dos dados. É muito utilizado para visualizar toda a distribuição de uma variável quantitativa. Foi introduzida pela primeira vez por Karl Pearson (OBS - É muito parecido com o gráfico de barras). 4.1 Boxplot no ggplot2 par(bg=&quot;#fdf6e3&quot;) # using ggplot2: var &lt;- rnorm(1000, 50,10) group &lt;- c(rep(&quot;A&quot;,100), rep(&quot;B&quot;,100), rep(&quot;C&quot;,100), rep(&quot;D&quot;,100), rep(&quot;E&quot;, 100)) dataf &lt;- data.frame(var, group) require(ggplot2) plot2 &lt;- ggplot (dataf, aes (y = var, x= group, fill = group )) plot2 + geom_boxplot()+theme_bw( ) 4.2 Alternativas ao Boxplot 4.3 Trellis plot in Box-Percentile Panel Decile plot x &lt;- c(rnorm(1000, 50, 20), rnorm(500, 70, 10), rnorm(500, 30, 10), runif(1000, 0, 100)) g &lt;- rep (c(&quot;normal&quot;, &quot;binormal&quot;, &quot;uniform&quot;), each = 1000) # default trellis box plot require(lattice) require(Hmisc) #regular box plot bwplot(g ~ x, col = &quot;red&quot;, fill = c(&quot;cyan4&quot;, &quot;tan&quot;, &quot;blue&quot;)) # box-percentile plot with data density (rug plot) bwplot(g ~ x, panel=panel.bpplot, probs=seq(.01,.49,by=.01), datadensity=TRUE, col = &quot;red&quot; ) # continuous plot up until quartiles (&quot;Tootsie Roll plot&quot;) bwplot(g ~ x, panel=panel.bpplot, probs=seq(.01,.25,by=.01)) # same as previous but add a spike to give 0.95 interval bwplot(g ~ x, panel=panel.bpplot, probs=c(.025,seq(.25,.49,by=.01))) 4.4 Decile plot # decile plot with reference lines at outer quintiles and median bwplot(g ~ x, panel=panel.bpplot, probs=c(.1,.2,.3,.4), qref=c(.5,.2,.8)) 4.5 Back #Box-percentile plots normal &lt;- rnorm(10000, 7.5,3) binormal &lt;- c(rnorm(5000, 3, 2.5), rnorm(5000, 5, 2.5)) uniform &lt;- runif (10000, -5, 17) require(Hmisc) bpplot(normal, binormal, uniform) #beanplot # data set.seed(1234) bimodal &lt;- c(rnorm(250, -2, 0.6), rnorm(250, 2, 0.6)) uniform &lt;- runif(500, -4, 4) normal &lt;- rnorm(500, 0, 1.5) ylim &lt;- c(-7, 7) # plot library(&quot;beanplot&quot;) beanplot(bimodal, uniform, normal, ylim = ylim, main = &quot;beanplot&quot;,col = c(&quot;cyan3&quot;, &quot;purple&quot;, &quot;purple&quot;), border = &quot;cyan3&quot;) # col - these colors stand for the area of the beans (without the border, use border for that color), the lines # inside the bean, the lines outside the bean, and the average line per bean 4.6 Notched boxplot # data x &lt;- c(rnorm(1000, 50, 20), rnorm(500, 70, 10), rnorm(500, 30, 10), runif(1000, 0, 100)) g &lt;- rep (c(&quot;normal&quot;, &quot;binormal&quot;, &quot;uniform&quot;), each = 1000) #plot boxplot(x, col = c(&quot;bisque&quot;), notch = TRUE) boxplot(x ~ g, col = c(&quot;bisque&quot;, &quot;cyan4&quot;, &quot;yellow&quot;), notch = TRUE) # layout boxplot is at the bottom data &lt;- rnorm(100) nf &lt;- layout(mat = matrix(c(1,2),2,1, byrow=TRUE), height = c(3,1)) par(mar=c(3.1, 3.1, 1.1, 2.1)) hist(data,xlim=c(-4,4), col = &quot;pink&quot;) boxplot(data, horizontal=TRUE, outline=TRUE,ylim=c(-4,4), frame=F, col = &quot;green1&quot;, width = 10) "],
["Hexabinscatterplot.html", "Cap 5 Hexabinscatterplot 5.1 Hexabin XY scatter plot and transparent point XY plot R Markdown", " Cap 5 Hexabinscatterplot 5.1 Hexabin XY scatter plot and transparent point XY plot R Markdown # data set.seed(1234) x = rnorm(10000, 50, 30) y = x*0.6 + rnorm (10000, 0, 30) df &lt;- data.frame(x,y) library(ggplot2) ggplot(df,aes(x=x,y=y)) + stat_binhex() + theme_bw() # vivid colored ggplot(df,aes(x=x,y=y)) + stat_binhex(colour=&quot;white&quot;,na.rm=TRUE) + scale_fill_gradientn(colours=c(&quot;green1&quot;,&quot;red&quot;),name = &quot;Frequency&quot;,na.value=NA)+ theme_bw() # plot with transparency ggplot(df,aes(x=x,y=y)) + geom_point(alpha = 0.3, col = &quot;red&quot;) + theme_bw() # in base # data set.seed(1234) x = rnorm(10000, 50, 30) y = x*0.6 + rnorm (10000, 0, 30) df &lt;- data.frame(x,y) plot(df$x, df$y, pch = 19, cex = 1, col = rgb(0,1,0, alpha = 0.1)) # alpha function to introduce transparency require(RColorBrewer) ## Carregando pacotes exigidos: RColorBrewer add.alpha &lt;- function(col, alpha=1){ if(missing(col)) stop(&quot;vector of colours missing&quot;) apply(sapply(col, col2rgb)/255, 2, function(x) rgb(x[1], x[2], x[3], alpha=alpha)) } # POINT SIZE AND TRANSPARENCY plot(df$x, df$y, pch = 19, cex = 0.5, col = add.alpha (&quot;red&quot;, 0.2)) set.seed (1234) Xv &lt;- c(rnorm (500, 10,3), rnorm (500, 50, 20), rnorm (500, 70, 20)) Yv &lt;- c(rnorm (500, 10,3), rnorm (500, 70, 5), rnorm (500, 30, 5)) myd &lt;- data.frame (Xv, Yv ) m &lt;- ggplot(myd, aes(x = Xv, y = Yv)) + geom_point() + geom_density2d() + theme_bw() "],
["Histograma.html", "Cap 6 Histograma 6.1 Histograma 6.2 Histograma no ggplot2 6.3 Modificação do Histograma no ggplot2 6.4 Histograma Avançado no ggplot2 6.5 Alternativas ao Histograma 6.6 Histograma por grupos ‘Stack’ 6.7 Back to back histogramas", " Cap 6 Histograma Definição: uma uma representação gráfica em formato de retângulos cuja área é proporcional à frequência de uma variável quantitativa e cuja largura é igual ao intervalo de classe. Para que serve: Um histograma é uma representação gráfica da distribuição de uma variável quantitativa contínua. Com o histograma pode-se visualizar a dispersão/concentração dos dados, bem como a assimetria/simetria dos dados. É muito utilizado para visualizar toda a distribuição de uma variável quantitativa. Foi introduzida pela primeira vez por Karl Pearson (OBS - É muito parecido com o gráfico de barras). par(bg=&quot;#fdf6e3&quot;) data(mtcars) hist(mtcars$mpg,col=&quot;steelblue&quot;) 6.1 Histograma library(RColorBrewer) par(bg=&quot;#fdf6e3&quot;) #display.brewer.all() COR&lt;-brewer.pal(5,&quot;Blues&quot;) #COR hist(mtcars$mpg,col=COR,main=&quot;Histograma do MPG&quot;,xlab = &quot;Milhas por Galão - MPG&quot;, ylab = &quot;Frequência&quot;) COR&lt;-brewer.pal(5,&quot;YlGn&quot;) hist(mtcars$mpg,col=COR, scale=&quot;percent&quot;,main=&quot;Histograma do MPG&quot;,xlab = &quot;Milhas por Galão - MPG&quot;, ylab = &quot;Percentual&quot;) 6.2 Histograma no ggplot2 par(bg=&quot;#fdf6e3&quot;) library(ggplot2) ggplot(mtcars, aes(mpg)) + geom_histogram() # Change color ggplot(mtcars, aes(mpg)) + geom_histogram(color=&quot;#45ad8a&quot;, fill=&quot;#417f6a&quot;) 6.3 Modificação do Histograma no ggplot2 par(bg=&quot;#fdf6e3&quot;) library(ggplot2) ggplot(mtcars, aes(y =..density..,mpg, fill = factor(am)))+ geom_histogram(binwidth = 1.5) ggplot(mtcars, aes(y =..density..,mpg, fill = factor(am)))+ geom_histogram(binwidth = 1.5)+ geom_density(alpha = .1) 6.4 Histograma Avançado no ggplot2 par(bg=&quot;#fdf6e3&quot;) df &lt;- data.frame( sex=factor(rep(c(&quot;F&quot;, &quot;M&quot;), each=200)), weight=round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5))) ) head(df) ## sex weight ## 1 F 48 ## 2 F 57 ## 3 F 56 ## 4 F 52 ## 5 F 52 ## 6 F 59 library(ggplot2) p&lt;-ggplot(df, aes(x=weight)) + geom_histogram() # Add mean line p+ geom_vline(aes(xintercept=mean(weight)), color=&quot;blue&quot;, linetype=&quot;dashed&quot;, size=1) ggplot(df, aes(x=weight, fill =sex, color=sex)) + geom_histogram(alpha=0.8, position=&quot;identity&quot;) # Change line colors by groups ggplot(df, aes(x=weight, fill =sex, color=sex)) + geom_histogram(alpha=0.8, position=&quot;identity&quot;)+ scale_color_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+ scale_fill_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+ labs(title=&quot;Histograma no ggplot2&quot;,x=&quot;Peso(kg)&quot;, y = &quot;Contagem&quot;)+ theme_classic() 6.5 Alternativas ao Histograma 6.6 Histograma por grupos ‘Stack’ par(bg=&quot;#fdf6e3&quot;) library(plotrix) df&lt;-data.frame(len=rnorm(100)+5, grp=sample(c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;),100,replace=TRUE)) histStack(len~grp,data=df,main=&quot;Histograma por grupos&quot;, xlab=&quot;grupos&quot;) 6.7 Back to back histogramas #Back to back histograms # data var1&lt;- rnorm(1000,10,3) var2 &lt;- sample(c(&#39;A&#39;,&#39;B&#39;),1000,TRUE) #plot require(Hmisc) out &lt;- histbackback(split(var1, var2), probability=TRUE, xlim=c(-.18,.18), main =&#39;Back to Back Histogram&#39;) "],
["Densidade.html", "Cap 7 Densidade 7.1 Densidade 7.2 Gráfico de densidade no ggplot2 7.3 Modificação do gráfico no ggplot2", " Cap 7 Densidade Definição: Para que serve: par(bg=&quot;#fdf6e3&quot;) require(car) data(mtcars) densityPlot( ~ mpg, data=mtcars, adjust=1, method=&quot;kernel&quot;,col=&quot;steelblue&quot;) 7.1 Densidade require(car) mtcars &lt;- within(mtcars, { am &lt;- as.factor(am) vs &lt;- as.factor(vs) }) par(bg=&quot;#fdf6e3&quot;) densityPlot(mpg~am, data=mtcars, adjust=1, method=&quot;kernel&quot;,col=c(&quot;steelblue&quot;,&quot;red&quot;)) 7.2 Gráfico de densidade no ggplot2 par(bg=&quot;#fdf6e3&quot;) library(ggplot2) ggplot(mtcars, aes(mpg)) + geom_density() # Change color ggplot(mtcars, aes(mpg)) + geom_density(color=&quot;#45ad8a&quot;, fill=&quot;#417f6a&quot;) 7.3 Modificação do gráfico no ggplot2 par(bg=&quot;#fdf6e3&quot;) library(ggplot2) ggplot(mtcars, aes(y =..density..,mpg, fill = factor(am)))+ geom_density() ggplot(mtcars, aes(y =..density..,mpg, fill = factor(am)))+ geom_density(alpha = .1) df &lt;- data.frame( sex=factor(rep(c(&quot;F&quot;, &quot;M&quot;), each=200)), weight=round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5))) ) ####################################### p&lt;-ggplot(df, aes(x=weight)) + geom_density() # Add mean line # Change line colors by groups ggplot(df, aes(x=weight, fill =sex, color=sex)) + geom_density(alpha=0.8, position=&quot;identity&quot;)+ scale_color_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+ scale_fill_manual(values=c(&quot;#999999&quot;, &quot;#E69F00&quot;, &quot;#56B4E9&quot;))+ labs(title=&quot;Histograma no ggplot2&quot;,x=&quot;Peso(kg)&quot;, y = &quot;Contagem&quot;)+ theme_classic() "],
["MatrizCorrelacao.html", "Cap 8 Matriz de Correlação", " Cap 8 Matriz de Correlação require(car) ## Carregando pacotes exigidos: car ## Carregando pacotes exigidos: carData data(mtcars) mtcars &lt;- within(mtcars, { am &lt;- factor(am, labels=c(&#39;Automático&#39;,&#39;Manual&#39;)) }) mtcars &lt;- within(mtcars, { vs &lt;- factor(vs, labels=c(&#39;Não&#39;,&#39;Sim&#39;)) }) par(bg=&quot;#fdf6e3&quot;) CARROS &lt;- mtcars[, c(&#39;mpg&#39;, &#39;cyl&#39;, &#39;disp&#39;, &#39;hp&#39;, &#39;carb&#39;,&#39;drat&#39;,&#39;wt&#39;)] par(bg=&quot;#fdf6e3&quot;) library(&quot;PerformanceAnalytics&quot;) chart.Correlation(CARROS, histogram=TRUE, pch=19) par(bg=&quot;#fdf6e3&quot;) require(magrittr) library(corrr) CARROS %&gt;% correlate() %&gt;% network_plot(min_cor=0.6) par(bg=&quot;#fdf6e3&quot;) library(psych) pairs.panels(CARROS, scale=TRUE) par(bg=&quot;#fdf6e3&quot;) library(corrplot) corrplot.mixed(cor(CARROS), order=&quot;hclust&quot;, tl.col=&quot;black&quot;) par(bg=&quot;#fdf6e3&quot;) library(ggcorrplot) ggcorrplot(cor(CARROS), p.mat = cor_pmat(CARROS), hc.order=TRUE, type=&#39;lower&#39;) par(bg=&quot;#fdf6e3&quot;) library(&quot;corrgram&quot;) corrgram(CARROS, order=TRUE, main=&quot;Carros&quot;, lower.panel=panel.shade, upper.panel=panel.pie, diag.panel=panel.minmax, text.panel=panel.txt) corrgram(CARROS, order=TRUE, upper.panel=panel.cor, main=&quot;Carros&quot;) corrgram(CARROS, order=TRUE, main=&quot;Carros)&quot;, lower.panel=corrgram::panel.ellipse, upper.panel=panel.bar, diag.panel=panel.minmax, col.regions=colorRampPalette(c(&quot;darkgoldenrod4&quot;, &quot;burlywood1&quot;, &quot;darkkhaki&quot;, &quot;darkgreen&quot;))) par(bg=&quot;#fdf6e3&quot;) library(GGally) library(ggplot2) ggcorr(CARROS, nbreaks=8, palette=&#39;RdGy&#39;, label=TRUE, label_size=5, label_color=&#39;white&#39;) ggpairs(data=mtcars, # data.frame with variables columns=1:4, # columns to plot, default to all. title=&quot;Carros&quot;, # title of the plot colour = &quot;am&quot;, ggplot2::aes(colour=am)) # aesthetics, ggplot2 style ggpairs(data=mtcars, columns=1:3, upper = list(continuous = &quot;density&quot;), lower = list(combo = &quot;facetdensity&quot;), title=&quot;Carros&quot;, colour = &quot;am&quot;, ggplot2::aes(colour=am)) "],
["Mapa.html", "Cap 9 Mapas 9.1 Mapa global", " Cap 9 Mapas 9.1 Mapa global # data library(OpenStreetMap) library(rgdal) ## Carregando pacotes exigidos: sp ## rgdal: version: 1.3-6, (SVN revision 773) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 2.2.3, released 2017/11/20 ## Path to GDAL shared files: C:/Users/TPC02/Documents/R/win-library/3.5/rgdal/gdal ## GDAL binary built with GEOS: TRUE ## Loaded PROJ.4 runtime: Rel. 4.9.3, 15 August 2016, [PJ_VERSION: 493] ## Path to PROJ.4 shared files: C:/Users/TPC02/Documents/R/win-library/3.5/rgdal/proj ## Linking to sp version: 1.3-1 # get world map map &lt;- openmap(c(70,-179), c(-70,179)) plot(map) bingmap &lt;- openmap(c(70,-179), c(-70,179), type = &quot;bing&quot;) plot(bingmap) #zoom maps, plot a portion # upperLeft, lowerRight lat &lt;- c(43.834526782236814, 30.334953881988564) lon &lt;- c(-85.8857421875, -70.0888671875) southest &lt;- openmap(c(lat[1],lon[1]),c(lat[2],lon[2]),zoom=7,&#39;osm&#39;) plot(southest) require(maps) ## Carregando pacotes exigidos: maps worldmap &lt;- map(&#39;world&#39;, plot = FALSE, fill = FALSE, projection = &quot;azequalarea&quot;) plot(worldmap) Lista de possibilidades projlist &lt;- c(&quot;aitoff&quot;, &quot;albers&quot;, &quot;azequalarea&quot;, &quot;azequidist&quot;, &quot;bicentric&quot;, &quot;bonne&quot;, &quot;conic&quot;, &quot;cylequalarea&quot;, &quot;cylindrical&quot;, &quot;eisenlohr&quot;, &quot;elliptic&quot;, &quot;fisheye&quot;, &quot;gall&quot;, &quot;gilbert&quot;, &quot;guyou&quot;, &quot;harrison&quot;, &quot;hex&quot;, &quot;homing&quot;, &quot;lagrange&quot;, &quot;lambert&quot;, &quot;laue&quot;, &quot;lune&quot;, &quot;mercator&quot;, &quot;mollweide&quot;, &quot;newyorker&quot;, &quot;orthographic&quot;, &quot;perspective&quot;, &quot;polyconic&quot;, &quot;rectangular&quot;, &quot;simpleconic&quot;, &quot;sinusoidal&quot;, &quot;tetra&quot;, &quot;trapezoidal&quot;) require(maps) worldmap &lt;- map(&#39;world&#39;, plot = FALSE, fill = FALSE, projection = &quot;tetra&quot;) plot(worldmap) "],
["Violino.html", "Cap 10 Violino Box plot", " Cap 10 Violino Box plot # data #Violin box plot #data set.seed (45) xv &lt;- rnorm(500, 50,15) gv &lt;- c(rep(&quot;A&quot;,100), rep(&quot;B&quot;,100), rep(&quot;C&quot;,100), rep(&quot;D&quot;,100), rep(&quot;E&quot;, 100)) dataf &lt;- data.frame(xv, gv) #plot require(lattice) ## Carregando pacotes exigidos: lattice library(&quot;latticeExtra&quot;) ## Carregando pacotes exigidos: RColorBrewer bwplot(xv, panel = panel.violin, box.ratio = 3, xlab=&quot;y(units)&quot;) bwplot(xv~gv, data=dataf, panel = panel.violin, box.ratio = 3, xlab=&quot;y(units)&quot;, col = &quot;green4&quot;) # using vioplot require(vioplot) ## Carregando pacotes exigidos: vioplot ## Carregando pacotes exigidos: sm ## Package &#39;sm&#39;, version 2.2-5.6: type help(sm) for summary information vioplot(xv[1:100], xv[101:200], xv[201:300], xv[301:400], xv[401:500],col=&quot;cyan2&quot;, border=&quot;cyan2&quot;, lty=1, lwd=1, rectCol=&quot;red&quot;, colMed=&quot;white&quot;, pchMed=19, add=FALSE, wex=1,drawRect=TRUE ) vioplot(xv[1:100], xv[101:200], xv[201:300], xv[301:400], xv[401:500],col=&quot;white&quot;, border=&quot;red&quot;, lty=1, lwd=1, rectCol=&quot;red&quot;, colMed=&quot;yellow&quot;, pchMed=19, add=TRUE, wex=1,drawRect=TRUE ) set.seed (45) xv &lt;- rnorm(500, 50,15) pch1 &lt;- rep(1:5, each = 100) plot(1, type=&quot;n&quot;, axes=F, xlab=&quot;&quot;, ylab=&quot;&quot;) vioplot(xv[1:100], xv[101:200], xv[201:300], xv[301:400], xv[401:500],col=&quot;white&quot;, border=&quot;red&quot;, lty=1, lwd=1, rectCol=&quot;red&quot;, colMed=&quot;yellow&quot;, pchMed=19, add=FALSE, wex=1,drawRect=TRUE ) points(pch1, xv, pch = 19, col = &quot;blue&quot;) "],
["references.html", "References", " References "]
]
