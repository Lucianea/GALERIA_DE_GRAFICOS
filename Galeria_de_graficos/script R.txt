https://github.com/DATAUNIRIO/ggpubr
http://www.sthda.com/english/articles/32-r-graphics-essentials/129-visualizing-multivariate-categorical-data/

## Bubble plot
data(mtcars)
names(mtcars)
radius <- sqrt(mtcars$mpg/pi)
symbols(mtcars$disp, mtcars$hp, circles = radius, inches = 0.25, fg = "white", 
    bg = "red", main = "Sized by MPG")

mtcars$am<-as.factor(mtcars$am)
#Scatterplot Matrix of all Numeric Vars, colored by a Factor variable
pairs(mtcars[,3:6], col = mtcars$am)

## Scatter plot with color identifying the factor variable
par(mfrow = c(1, 1))
plot(mtcars$disp, mtcars$hp, col = mtcars$am)
legend("topright", levels(mtcars$am), fill = mtcars$am)


sequences <- read.table(text = '
A-aa-aaa-end
                        A-aa-aaa-end
                        A-aa-vvv-end
                        A-aa-vvv-end
                        A-cc-vvv-end
                        A-cc-vvv-end
                        B-aa-vvv-end
                        B-aa-vvv-end
                        B-bb-rr-end
                        B-bb-rr-end
                        C-aa-rr-end
                        C-aa-rr-end
                        C-bb-rr-end
                        C-bb-rr-end
                        C-cc-rr-end
                        ')

sequences$V2 <- seq_along(sequences$V1)
sequences

library(sunburstR)
sunburst(sequences)

<!-- existem diversas comparar o boxplot com uma visualizacao do ggplot jitter -->
<!--
Area plot 
Streamchart 
Treemap
Mosaic
Radar
Lollipop plot 
Map 
hord diagram 
Network chart 
Streamchart 
Sankey diagram 
LIkert
time series plot

#violin plot
library(plotrix)
normvar<-c(rnorm(49),-4)
  unifvar<-runif(50,-2,2)
  violin_plot(matrix(c(normvar,unifvar),ncol=2),
   main="Default plot",x_axis_labels=c("Normal","Uniform"))


   

#quali X quali
library(plotrix)
happyday<-data.frame(Monday=c(2.3,3.4),Tuesday=c(2.8,3.3),Wednesday=c(3.2,3.1),
  Thursday=c(3.6,2.8),Friday=c(4.2,2.6),Saturday=c(4.5,2.9),Sunday=c(4.1,2.8))
  happylabels<-c("Utterly dashed","Rather mopey","Indifferent","Somewhat elated",
   "Euphoric")
  barp(happyday,names.arg=names(happyday),legend.lab=c("Slaves","Unemployed"),
   legend.pos=list(x=2,y=4.5),col=c("#ee7700","#3333ff"),
   main="Test of barp, staxlab and color.legend",
   xlab="Day of week",ylab="Happiness rating",ylim=c(1,5),staxx=TRUE,staxy=TRUE,
   height.at=1:5,height.lab=happylabels,cex.axis=1,cylindrical=TRUE,
   shadow=TRUE)

   
testdf <- data.frame(Before = c(10, 7, 5, 9), During = c(8, 6, 2, 5),
   After = c(5, 3, 4, 3))
  rownames(testdf) <- c("Red", "Green", "Blue", "Lightblue")
  barp(testdf, main = "Test addtable2plot", ylab = "Value",
   names.arg = colnames(testdf), col = 2:5)

   
   
plot(1:5,type="n",main="Floating Pie test",xlab="",ylab="",axes=FALSE)
  box()
  polygon(c(0,0,5.5,5.5),c(0,3,3,0),border="#44aaff",col="#44aaff")
  floating.pie(1.7,3,c(2,4,4,2,8),radius=0.5,
   col=c("#ff0000","#80ff00","#00ffff","#44bbff","#8000ff"))
  floating.pie(3.1,3,c(1,4,5,2,8),radius=0.5,
   col=c("#ff0000","#80ff00","#00ffff","#44bbff","#8000ff"))
  floating.pie(4,1.5,c(3,4,6,7),radius=0.5,
   col=c("#ff0066","#00cc88","#44bbff","#8000ff"))
  draw.circle(3.9,2.1,radius=0.04,col="white")
  draw.circle(3.9,2.1,radius=0.04,col="white")
  draw.circle(3.9,2.1,radius=0.04,col="white")
  draw.circle(4,2.3,radius=0.04,col="white")
  draw.circle(4.07,2.55,radius=0.04,col="white")
  draw.circle(4.03,2.85,radius=0.04,col="white")
  text(c(1.7,3.1,4),c(3.7,3.7,3.7),c("Pass","Pass","Fail"))   
   
   
  #quali X Quanti 
  library(plotrix) 
  y1<-runif(20,2,10)
  y2<-rnorm(30,6,2)
  y3<-sample(0:20,40,TRUE)
  Ns<-c(20,30,40)
  ymean<-c(mean(y1),mean(y2),mean(y3))
  y1inner<-quantile(y1,probs=c(.16,.84))
  y2inner<-c(ymean[2]+sd(y2),ymean[2]-sd(y2))
  y3inner<-quantile(y3,probs=c(.16,.84))
  uinner<-c(y1inner[1],y2inner[1],y3inner[1])
  linner<-c(y1inner[2],y2inner[2],y3inner[2])
  ulim<-c(max(y1),max(y2),max(y3))
  llim<-c(min(y1),min(y2),min(y3))
  box.heresy(ymean,uinner=uinner,linner=linner,ulim=ulim,llim=llim,boxwidth=Ns,
   main="Boxplot of means, central spread and range",xlab="Distribution",
   xaxlab=c("Uniform","Normal","Sample"),col=c("red","blue","green"))

  #quali X Quanti
  data(iris)
  ehplot(iris$Sepal.Length, iris$Species, intervals=20, cex=1.8, pch=20)
  
  #quali X Quanti
   test.df<-data.frame(a=rnorm(80)+4,b=rnorm(80)+4,c=rep(LETTERS[1:4],each=20),
   d=rep(rep(letters[1:4],each=4),5))
  # first use the default values
  brkdn.plot("a","c","d",test.df,pch=1:4,col=1:4)
  
    #quali X Quanti
  x <- data.frame(id = 1:150,
   offset = rep(c("Group A", "Group B", "Group C"),
   each = 50), xaxis = sample(c("A", "B", "C", "D"),150, replace = TRUE),
   data = c(rnorm(50, 10, 5), rnorm(50, 15,6), rnorm(50, 20, 5)))
  raw.means.plot(x)
 
  #outra visualizacao - centopeia
  library(plotrix)   
  testcp<-list("",40)
  for(i in 1:40) testcp[[i]]<-rnorm(sample(1:8,1)*50)
  segs<-get.segs(testcp)
  centipede.plot(segs,main="Centipede plot",vgrid=0)
  xy.mat<-cbind(sample(1:10,200,TRUE),sample(1:10,200,TRUE))
  
  
  #outra visualizacao - congresso
  eu = structure(list(colour = c("#3399FF", "#F0001C", "#0054A5",
  "#FFD700", "#990000", "#909090", "#32CD32", "#40E0D0"),
   party = c("EPP", "S and D", "ECR", "ALDE", "GUE-NGL",
   "Non-Inscrits", "Greens-EFA", "EFDD"),
   members = c(220L, 191L, 70L, 68L, 52L, 52L, 50L, 48L)),
  .Names = c("colour", "party", "members"), row.names = c(NA,
  -8L), class = "data.frame")
  strasbourg = seats(751, 16)
  eugov = election(strasbourg, eu, party~members, colours=eu$colour)
  oldmar<-par(mar=c(2,4,4,2))
  plot(eugov$x, eugov$y, col=eugov$colour, asp=1, pch=19, ylim=c(-2,2.5),
   xlab="", ylab="", main="EU Parliament 2014", axes=FALSE)
  legend(-0.7,-0.3,eu$party,fill=eu$colour)
  par(oldmar)
  
  # piramide etária
  xy.pop<-c(3.2,3.5,3.6,3.6,3.5,3.5,3.9,3.7,3.9,3.5,3.2,2.8,2.2,1.8,
   1.5,1.3,0.7,0.4)
  xx.pop<-c(3.2,3.4,3.5,3.5,3.5,3.7,4,3.8,3.9,3.6,3.2,2.5,2,1.7,1.5,
   1.3,1,0.8)
  agelabels<-c("0-4","5-9","10-14","15-19","20-24","25-29","30-34",
   "35-39","40-44","45-49","50-54","55-59","60-64","65-69","70-74",
   "75-79","80-44","85+")
  mcol<-color.gradient(c(0,0,0.5,1),c(0,0,0.5,1),c(1,1,0.5,1),18)
  fcol<-color.gradient(c(1,1,0.5,1),c(0.5,0.5,0.5,1),c(0.5,0.5,0.5,1),18)
  par(mar=pyramid.plot(xy.pop,xx.pop,labels=agelabels,
   main="Australian population pyramid 2002",lxcol=mcol,rxcol=fcol,
   gap=0.5,show.values=TRUE))


    #outra visualizacao - batalha naval
 x<-matrix(sample(10:50,100,TRUE),10)
   xaxlab=c("One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten")
   yaxlab=c("First","Second","Third","Fourth","Fifth","Sixth","Seventh",
    "Eighth","Ninth","Tenth")
  battleship.plot(x,xlab="The battle has just begun",main="Battleship1",
   xaxlab=xaxlab,yaxlab=yaxlab,col=c("red","blue"))
   
    #outra visualizacao - parecido com batalha naval
     data(mtcars)
  cumcars<-by(mtcars$carb,list(mtcars$cyl,mtcars$gear),valid.n)
  mtcars2<-data.frame(cyl=NA,gear=NA,carb=NA)
  rownum<-1
  for(cyl in dimnames(cumcars)[[1]]) {
   for(gear in dimnames(cumcars)[[2]]) {
    if(!is.na(cumcars[cyl,gear])) {
     mtcars2[rownum,]<-c(as.numeric(cyl),as.numeric(gear),cumcars[cyl,gear])
     rownum<-rownum+1
    }
   }
  }
  clustered.dotplots(xgroup = mtcars2$cyl, ygroup = mtcars2$gear,
   freq = mtcars2$carb,main="Cars by number of cylinders and gears",
   xlab="Number of cylinders",ylab="Number of gears",type="points",pch=5)
   
   
   
   
       #outra visualizacao - mudança entre censos
  x<-data.frame(A=c(1:10), B=c(2:11)+rnorm(10))
  y<-data.frame(x, C=c(1:10)+rnorm(10))
  ladderplot(x)   
	   
   educattn<-matrix(c(90.4,90.3,75.7,78.9,66,71.8,70.5,70.4,68.4,67.9,
   67.2,76.1,68.1,74.7,68.5,72.4,64.3,71.2,73.1,77.8),ncol=2,byrow=TRUE)
  rownames(educattn)<-c("Anchorage AK","Boston MA","Chicago IL",
   "Houston TX","Los Angeles CA","Louisville KY","New Orleans LA",
   "New York NY","Philadelphia PA","Washington DC")
  colnames(educattn)<-c(1990,2000)
  bumpchart(educattn,rank=FALSE,
   main="Percentage high school completion by over 25s",col=rainbow(10))
  par(mar=c(5,5,4,2))
  
  
  
  
  testlen<-c(rnorm(36)*2+5)
  testpos<-seq(0,350,by=10)
  polar.plot(testlen,testpos,main="Test Polar Plot",lwd=3,line.col=4)
  x11()
testlen<-runif(10,0,10)
  testpos<-seq(0,18*pi/10,length=10)
  testlab<-letters[1:10]
  par(radial.plot(testlen,testpos,main="Test Radial Lines",line.col="red",
   lwd=3,rad.col="lightblue"))



  # gráfico de gantt
    Ymd.format<-"%Y/%m/%d"
  gantt.info<-list(labels=
   c("First task","Second task","Third task","Fourth task","Fifth task"),
  starts=as.POSIXct(strptime(
  c("2004/01/01","2004/02/02","2004/03/03","2004/05/05","2004/09/09"),
  format=Ymd.format)),
  ends=as.POSIXct(strptime(
  c("2004/03/03","2004/05/05","2004/05/05","2004/08/08","2004/12/12"),
  format=Ymd.format)),
  priorities=c(1,2,3,4,5))
  vgridpos<-as.POSIXct(strptime(c("2004/01/01","2004/02/01","2004/03/01",
  "2004/04/01","2004/05/01","2004/06/01","2004/07/01","2004/08/01",
  "2004/09/01","2004/10/01","2004/11/01","2004/12/01"),format=Ymd.format))
  vgridlab<-
  c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
  gantt.chart(gantt.info,main="Calendar date Gantt chart (2004)",
   priority.legend=TRUE,vgridpos=vgridpos,vgridlab=vgridlab,hgrid=TRUE)
   
   # serie temporal com dois eixos
     going_up<-seq(3,7,by=0.5)+rnorm(9)
  going_down<-rev(60:74)+rnorm(15)
  twoord.plot(2:10,going_up,1:15,going_down,xlab="Sequence",
   ylab="Ascending values",rylab="Descending values",lcol=4,
   main="Plot with two ordinates - points and lines",
   do.first="plot_bg();grid(col=\"white\",lty=1)")
   
# alternativa ao treemap   
    cat1<-factor(sample(c("None","Low","Medium","High","Extreme"),40,TRUE),
   levels=c("None","Low","Medium","High","Extreme"))
  cat2<-factor(sample(c("None","Low","Medium","High"),40,TRUE),
   levels=c("None","Low","Medium","High"))
  cat3<-factor(sample(c("None","Low","High"),40,TRUE),
   levels=c("None","Low","High"))
  hcats<-data.frame(cat1,cat2,cat3)
  # throw in a few NAs
  hcats$cat1[10]<-NA
  hcats$cat2[c(15,20)]<-NA
  hcats$cat3[c(11,14,25)]<-NA
  # first let sizetree work out the colors
  sizetree(hcats,main="Sizetree with automatic colors")
  par(mar=c(5,4,4,2))

# waterfallplot  
  sample_size<-c(500,-72,428,-94,334,-45,289)
  totals<-c(TRUE,FALSE,TRUE,FALSE,TRUE,FALSE,TRUE)
  labels<-c("Contact list","Uncontactable","","Declined","","Ineligible",
   "Final sample")
  staircase.plot(sample_size,totals,labels,
   main="Acquisition of the sample (staircase.plot)",
   total.col="blue",inc.col=2:4,bg.col="#eeeebb",direction="s")

   
 # taylor.diagram (It is used to quantify the degree of correspondence between the modeled and observed behavior in terms of three statistics: the Pearson correlation coefficient, the root-mean-square error (RMSE) error, and the standard deviation.)
   ref<-rnorm(30,sd=2)
  model1<-ref+rnorm(30)/2
  model2<-ref+rnorm(30)
  oldpar<-taylor.diagram(ref,model1)
  taylor.diagram(ref,model2,add=TRUE,col="blue")
  lpos<-1.5*sd(ref)
  legend(lpos,lpos,legend=c("Better","Worse"),pch=19,col=c("red","blue"))
  par(oldpar)

  
  #mapadecalor
  par(mar=c(7,4,4,6))
  testcol<-color.gradient(c(0,1),0,c(1,0),nslices=5)
  col.labels<-c("Cold","Warm","Hot")
  # this will put the labels at the intersections
  # col.labels<-c("","Cold","","Warm","","Warmer","","Hot","")
  color2D.matplot(matrix(rnorm(100),nrow=10),c(1,0),0,c(0,1),
   main="Test color legends")
  color.legend(11,6,11.8,9,col.labels,testcol,gradient="y")
  color.legend(10.2,2,11,5,col.labels,testcol,align="rb",gradient="y")
  color.legend(0.5,-2,3.5,-1.2,col.labels,testcol)
  color.legend(7,-1.8,10,-1,col.labels,testcol,align="rb",col=testcol[c(1,3,5)])
  par(mar=c(5,4,4,2))

  #diagrama de dispersao com barras de erro
  disptest<-matrix(rnorm(200),nrow=20)
  disptest.means<-rowMeans(disptest)
  row.order<-order(disptest.means)
  se.disptest<-unlist(apply(disptest,1,std.error))
  plot(disptest.means[row.order],main="Dispersion as error bars",
   ylim=c(min(disptest.means-se.disptest),max(disptest.means+se.disptest)),
   xlab="Occasion",ylab="Value")
  dispersion(1:20,disptest.means[row.order],se.disptest[row.order])

  # box -plot
  ahw.df<-data.frame(Age=rnorm(100,35,10),
   Height=rnorm(100,160,15),Weight=rnorm(100,75,20))
  par(mfrow=c(1,3))
  boxplot(ahw.df$Age,main="Age")
  points(jiggle(100,c(0.5,1.5)),ahw.df$Age,col="red")
  boxplot(ahw.df$Height,main="Height")
  points(jiggle(100,c(0.5,1.5)),ahw.df$Height,col="green")
  boxplot(ahw.df$Weight,main="Weight")
  points(jiggle(100,c(0.5,1.5)),ahw.df$Weight,col="blue")
  par(mfrow=c(1,1))
  
  # matriz de radar
  date_mat<-data.frame(sex=rep(c("M","F"),each=10),
   names=c("Abe","Bob","Col","Dave","Eddie","Frank","Geoff","Harry","Igor","Jack",
   "Alice","Betty","Clare","Dora","Eva","Fran","Grace","Hilda","Iris","Joan"),
   eating=sample(0:100,20),dancing=sample(0:100,20),movies=sample(0:100,20),
   reading=sample(0:100,20),travel=sample(0:100,20))
  plot(0,xlim=c(0.5,10.5),ylim=c(0,3),type="n",axes=FALSE,xlab="",ylab="Sex",
   main="Date matching matrix")
  par(xpd=TRUE)
  legend(0.7,-0.3,c("Eat out","Dance","Movies","Read","Travel"),fill=rainbow(5),
   ncol=5)
  par(xpd=FALSE)
  box()
  axis(2,at=c(0.9,2.4),labels=c("Male","Female"))
  starPie(x=rep(1:10,2),y=rep(c(0.9,2.4),each=10),radext=0.5,
   values=as.matrix(date_mat[,3:7]),label=as.character(date_mat[["names"]]))

   #area
testx<-matrix(cumsum(rnorm(30)^2)+1,nrow=10)
  stackpoly(testx,main="",
   xaxlab=c("One","Two","Three","Four","Five",
   "Six","Seven","Eight","Nine","Ten"),staxx=TRUE)
  tab.title("Three Squiggly Lines",tab.col="yellow",radius=0.5)

  source("http://www.math.smith.edu/sasr/examples/wild-helper.R") # getting the boxplonts3 function
ds = read.csv("http://www.math.smith.edu/r/data/help.csv") # getting some data
female = subset(ds, female==1)
with(female,boxpoints2(pcs, homeless, "PCS", "Homeless"))  # plotting...

https://www.r-statistics.com/2011/03/beeswarm-boxplot-and-plotting-it-with-r/
  qualiXQuanti
  ## Gráficos "DendroPlot"
```{r DendroPlot, message=FALSE, warning=FALSE}
library(plotrix)  
x<-list(runif(90,1,2),factor(sample(LETTERS,100,TRUE)),rnorm(80,mean=5))
dendroPlot(x,breaks=list(seq(1,2,by=0.1),0,0:10),nudge=c(0.03,0.3),
xlab="Grupos",ylab="Contagem",main="DendroPlot",col="#275b70")

dotchart(VADeaths, main = "Death Rates in Virginia - 1940")
op <- par(xaxs = "i")  # 0 -- 100%
dotchart(t(VADeaths), xlim = c(0,100),
         main = "Death Rates in Virginia - 1940")
par(op)
```
-->